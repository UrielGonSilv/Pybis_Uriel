# -*- coding: utf-8 -*-
"""Avance del proyecto parte III.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AgnXipBwpKHJtd36rlUGdTLf1wm-BUGa
"""

# Lo que queda manual en tu codigo, se convierte en parametro de tu funcion
# funcion igual proceso

# Crearemos nuestra primer funcion del proyecto
def generar_df_ventas(fecha):
  # ============================================================================
  #                       ZONA DE LISTAS-MATERIA PRIMA
  #                       PARA GENERAR LAS VENTAS
  # ============================================================================
  abcdario = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
    'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
    'U', 'V', 'W', 'X', 'Y', 'Z'
    ]

  papelerias = [
    'Xochimilco', 'Cuemanco', 'Coapa', 'Milpa Alta',
    'CU', 'Zócalo', 'Narvarte', 'Santa Fé', 'Polanco',
    'Centro'
    ]

  lineas = [
      'Cuadernos', 'Libretas', 'Lápices', 'Plumones', 'Borradores', 'Sacapuntas',
      'Laptops', 'Tablets', 'Mochilas', 'Bolsas', 'Cajas', 'Pegamento', 'Tijeras',
      'Monitores', 'Teclados', 'Mouse', 'Audífonos', 'Cables', 'Cargadores', 'Baterías',
      'Pc', 'Uniformes', 'Pinturas', 'Pinceles', 'Papel', 'Cartulinas'
      ]

  # ============================================================================
  #                       ZONA LISTAS VACIA
  # ============================================================================
  # Al inicio no tienen nada, despues la rellenamos en el bucle
  fechas = []
  productos = []
  claves = []
  cantidades = []
  precios = []
  totales = []
  sucursales = []
  # ============================================================================
  #                       ZONA DE LA GENERACION DE LOS DATOS
  # ============================================================================
  for i in range(1, r.randint(1001, 20001)):
      # Zona de definicion de variables
      producto = r.choice(lineas)
      clave = r.choice(abcdario) + r.choice(abcdario) + r.choice(abcdario) + '-' + str(r.randint(1, 9)) + str(r.randint(1, 9)) + str(r.randint(1, 9))
      cantidad = r.randint(1, 50)
      precio = round(r.randint(1, 10000) * r.random(), 2)
      total = round(precio * cantidad, 2)
      sucursal = r.choice(papelerias)

      # Agregamos los datos a las listas
      fechas.append(fecha)
      productos.append(producto)
      claves.append(clave)
      cantidades.append(cantidad)
      precios.append(precio)
      totales.append(total)
      sucursales.append(sucursal)

  # ============================================================================
  #                       ZONA CREACION DATAFRAME
  # ============================================================================
  dict_pre_ventas = {
      # clave: valores asociados
      "Fecha": fechas,
      "Producto": productos,
      "Clave": claves,
      "Cantidad": cantidades,
      "Precio": precios,
      "Total": totales,
      "Sucursal": sucursales
  }

  # Pandas es como el Excel de Python
  # Datframe <---> tabla de Excel
  # Creamos el dataframe con la funcion de pandas pd.DataFrame()
  df_2 = pd.DataFrame(dict_pre_ventas)

  print(f"Información generada al {fecha} con éxito")

  return df_2

# Ponemos a prueba nuestra funcion
# Si tu funcion regresa cosas, guardalas en variables
df_julio_1 = generar_df_ventas("2025-07-01")

# mandamos a llamar a nuestro dataframe
df_julio_1

# 1. Crea la base de datos por primera vez y se conecta a ella
# Despues: se conecta a la base de datos
conexion = sql.connect("Ventas.db")

# 2. Subir el dataframe POR PRIMERA VEZ a la base de datos
# * primera vez: if_exists="replace"
# * Despues: if_exists="append"
df_julio_1.to_sql("Ventas_2025", conexion, if_exists="append")

# 3. Siempre que creas una conexion, la debes cerrar
conexion.close()

"""1.- Si te diste cuenta, en la clase generamos un rango de fechas con pandas para subir a nuestra base de
datos la información de ventas de todo enero. Sabemos que la función generar_df_ventas() genera
las ventas dada una sola fecha, así, lo que debes de hacer es crear una función extra en nuestra librería
que te permita generar información y subirla a la base de datos para un rango de fechas dado. Ayúdate
de lo que hicimos en clase y lo que hemos estado haciendo para convertir código "normal" a funciones.
"""

# Con lo aprendido en clase para crear un rango de fechas debemos crear una base
# de datos para integrar un rango de fechas. Con lo cual debemos hacer una
# función en nuestro codigo.
# Crearemos nuestra primer funcion del proyecto

def generar_df_ventas(fecha, boolVentas):
  # =============================================================================================================
  # ============================================================================
  #                       ZONA DE LISTAS-MATERIA PRIMA
  #                       PARA GENERAR LAS VENTAS
  # ============================================================================
  abcdario = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
    'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
    'U', 'V', 'W', 'X', 'Y', 'Z'
    ]

  papelerias = [
    'Xochimilco', 'Cuemanco', 'Coapa', 'Milpa Alta',
    'CU', 'Zócalo', 'Narvarte', 'Santa Fé', 'Polanco',
    'Centro'
    ]

  lineas = [
      'Cuadernos', 'Libretas', 'Lápices', 'Plumones', 'Borradores', 'Sacapuntas',
      'Laptops', 'Tablets', 'Mochilas', 'Bolsas', 'Cajas', 'Pegamento', 'Tijeras',
      'Monitores', 'Teclados', 'Mouse', 'Audífonos', 'Cables', 'Cargadores', 'Baterías',
      'Pc', 'Uniformes', 'Pinturas', 'Pinceles', 'Papel', 'Cartulinas'
      ]

  # ============================================================================
  #                       ZONA LISTAS VACIA
  # ============================================================================
  # Al inicio no tienen nada, despues la rellenamos en el bucle
  fechas = []
  productos = []
  claves = []
  cantidades = []
  precios = []
  totales = []
  sucursales = []
  # ============================================================================
  #                       ZONA DE LA GENERACION DE LOS DATOS
  # ============================================================================
  for i in range(1, r.randint(1001, 20001)):
      # Zona de definicion de variables
      producto = r.choice(lineas)
      clave = r.choice(abcdario) + r.choice(abcdario) + r.choice(abcdario) + '-' + str(r.randint(1, 9)) + str(r.randint(1, 9)) + str(r.randint(1, 9))
      cantidad = r.randint(1, 50)
      precio = round(r.randint(1, 10000) * r.random(), 2)
      total = round(precio * cantidad, 2)
      sucursal = r.choice(papelerias)

      # Agregamos los datos a las listas
      fechas.append(fecha)
      productos.append(producto)
      claves.append(clave)
      cantidades.append(cantidad)
      precios.append(precio)
      totales.append(total)
      sucursales.append(sucursal)

  # ============================================================================
  #                       ZONA CREACION DATAFRAME
  # ============================================================================
  dict_pre_ventas = {
      # clave: valores asociados
      "Fecha": fechas,
      "Producto": productos,
      "Clave": claves,
      "Cantidad": cantidades,
      "Precio": precios,
      "Total": totales,
      "Sucursal": sucursales
  }

  # Pandas es como el Excel de Python
  # Datframe <---> tabla de Excel
  # Creamos el dataframe con la funcion de pandas pd.DataFrame()
  df_2 = pd.DataFrame(dict_pre_ventas)

  print(f"Información generada al {fecha} con éxito")

  # =============================================================================================================
  # return df_2
  # *****En vez de retornarlo, directamente lo subimos a la base de datos******

  # realizamos la conexion
  conexion = sql.connect("Ventas.db")

  if boolVentas == True:
    # accion 1: crear la tabla por primera vez
    df_2.to_sql("Ventas_2025", conexion, if_exists="replace")
  else:
    # accion 2: apilamos la info
    df_2.to_sql("Ventas_2025", conexion, if_exists="append")

  # Cerramos la conexion
  conexion.close()

  print(f"Información subida a la bbdd al {fecha} con éxito")

  # Con esto creamos en función nuestro codigo para genear las ventas aleatorias
  # entre dos numeros enteros.

# Para verificar que si creamos la función creamos una fecha.
# La primera vez que se ua debe ser con "True" y despues se usa "False"
generar_df_ventas("2025-07-01", True)

generar_df_ventas("2025-07-02", False)

generar_df_ventas("2025-07-03", False)

generar_df_ventas("2025-07-04", False)

"""**CON ESTO PODEMOS GENERAR MAS VENTAS A LA VEZ**"""

# importamos la biblioteca de pandas
import pandas as pd

# pd.date_range(start=f1, end=f2, freq="d"): genera un rango de fechas entre la fecha
# f1 y f2 de manera diaria
rango_fechas = pd.date_range(start="2025-07-02", end="2025-07-31", freq="d")

# Despues de generar el rango de fechas, lo recorremos
# y ejecutamos nuestra funcion
for fecha in rango_fechas:
  generar_df_ventas(fecha, False)

"""**CON ESTO PODEMOS CREAR UNA FUCNIÓN LA CUAL NOS AYUDE A CREAR FECHAS DIRECTAMENTE CON UNA LINEA DE CODIGO**"""

def rango_fechas(fecha1, fecha2):
  # pd.date_range(start=f1, end=f2, freq="d"): genera un rango de fechas entre la fecha
  # f1 y f2 de manera diaria
  rango_fechas = pd.date_range(start=fecha1, end=fecha2, freq="d")

  # Despues de generar el rango de fechas, lo recorremos
  # y ejecutamos nuestra funcion
  for fecha in rango_fechas:
    generar_df_ventas(fecha, False)

# LA PONEMOS A PRUEBA CON UN RANGO DE FECHAS POR EJEMPLO EN EL MES DE OCTUBRE
rango_fechas("2025-10-01", "2025-10-31")
